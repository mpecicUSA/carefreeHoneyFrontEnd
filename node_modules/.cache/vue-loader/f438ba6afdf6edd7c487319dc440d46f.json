{"remainingRequest":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/src/views/Shop.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/src/views/Shop.vue","mtime":1558031957268},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SingleProduct from \"../components/SingleProduct\"\nexport default {\n    components: {\n        SingleProduct\n    },\n    data(){\n        return { \n            // useful for data binding in forms most commonly used as a local state,\n            // also useful with v-model in form inputs\n            raw: true,\n            infused: true\n        }\n    }, \n    created() {\n        this.$store.dispatch('fetchProductsData');\n    },\n    mounted:{\n        // life cycle method. good for executing a dispatch to populate your data\n        // this.$store.dispatch('getAllLinks', optionalPayload);\n        getProducts: function() {\n            this.$store.dispatch(\"getAllProducts\")\n        },\n        getUser: function() {\n            return this.$store.dispatch('fetchUser') \n        }\n    },\n    methods: {\n        rawFilter: function(){\n            console.log(\"Raw was hit!\");\n        }\n        // this is a static method you have exectute example submit on form \n        // these methods are executed via an event\n        // use for event handling\n    },\n    computed: {\n        // these are bound to store, recalced any time you change the corresponding store value\n        // these values are good for data binding, for example, iterating over a list of values\n        products() {\n                return this.$store.getters.getProducts\n        },\n        getCart(){\n            return this.$store.getters.getCart\n        }\n    }\n}\n",{"version":3,"sources":["Shop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Shop.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <!-- largest container -->\n    <v-container> \n        <!-- top row -->\n        <v-layout row>\n            <v-btn v-show=\"this.$store.state.user.admin\" route to=\"/products/add\">Add a new item!</v-btn>\n        </v-layout>\n        <!-- aside -->\n        <v-layout justify-space-around row fill-height >\n            <v-flex row xs3> \n                <p>Filter: </p>\n\n            <v-switch\n                v-model=\"raw\"\n                label=\"Raw\"\n                color=\"orange\"\n                @click=\"rawFilter\"\n                >\n            </v-switch>\n            <v-switch\n                v-model=\"infused\"\n                label=\"Infused\"\n                color=\"orange\"\n                >\n            </v-switch>\n            \n\n            </v-flex>\n            <!-- main content  -->\n            <v-flex xs9 row wrap>\n                <SingleProduct v-for=\"product in products\" :key=\"product.id\" :products=\"product\" /> \n            </v-flex>\n        </v-layout>\n    </v-container>\n</template> \n\n\n<script>\nimport SingleProduct from \"../components/SingleProduct\"\nexport default {\n    components: {\n        SingleProduct\n    },\n    data(){\n        return { \n            // useful for data binding in forms most commonly used as a local state,\n            // also useful with v-model in form inputs\n            raw: true,\n            infused: true\n        }\n    }, \n    created() {\n        this.$store.dispatch('fetchProductsData');\n    },\n    mounted:{\n        // life cycle method. good for executing a dispatch to populate your data\n        // this.$store.dispatch('getAllLinks', optionalPayload);\n        getProducts: function() {\n            this.$store.dispatch(\"getAllProducts\")\n        },\n        getUser: function() {\n            return this.$store.dispatch('fetchUser') \n        }\n    },\n    methods: {\n        rawFilter: function(){\n            console.log(\"Raw was hit!\");\n        }\n        // this is a static method you have exectute example submit on form \n        // these methods are executed via an event\n        // use for event handling\n    },\n    computed: {\n        // these are bound to store, recalced any time you change the corresponding store value\n        // these values are good for data binding, for example, iterating over a list of values\n        products() {\n                return this.$store.getters.getProducts\n        },\n        getCart(){\n            return this.$store.getters.getCart\n        }\n    }\n}\n</script>\n\n\n<style>\n\n</style>\n"]}]}