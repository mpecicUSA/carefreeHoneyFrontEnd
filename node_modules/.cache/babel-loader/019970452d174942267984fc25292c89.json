{"remainingRequest":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/babel-loader/lib/index.js!/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vuetify-loader/lib/loader.js!/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/src/views/Shop.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/src/views/Shop.vue","mtime":1558031957268},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mPecic/Documents/Galvanize/g104-capstone-submissions/carefree-honey/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SingleProduct from \"../components/SingleProduct\";\nexport default {\n  components: {\n    SingleProduct: SingleProduct\n  },\n  data: function data() {\n    return {\n      // useful for data binding in forms most commonly used as a local state,\n      // also useful with v-model in form inputs\n      raw: true,\n      infused: true\n    };\n  },\n  created: function created() {\n    this.$store.dispatch('fetchProductsData');\n  },\n  mounted: {\n    // life cycle method. good for executing a dispatch to populate your data\n    // this.$store.dispatch('getAllLinks', optionalPayload);\n    getProducts: function getProducts() {\n      this.$store.dispatch(\"getAllProducts\");\n    },\n    getUser: function getUser() {\n      return this.$store.dispatch('fetchUser');\n    }\n  },\n  methods: {\n    rawFilter: function rawFilter() {\n      console.log(\"Raw was hit!\");\n    } // this is a static method you have exectute example submit on form \n    // these methods are executed via an event\n    // use for event handling\n\n  },\n  computed: {\n    // these are bound to store, recalced any time you change the corresponding store value\n    // these values are good for data binding, for example, iterating over a list of values\n    products: function products() {\n      return this.$store.getters.getProducts;\n    },\n    getCart: function getCart() {\n      return this.$store.getters.getCart;\n    }\n  }\n};",{"version":3,"sources":["Shop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,OAAA,aAAA,MAAA,6BAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA;AACA;AACA,MAAA,GAAA,EAAA,IAHA;AAIA,MAAA,OAAA,EAAA;AAJA,KAAA;AAMA,GAXA;AAYA,EAAA,OAZA,qBAYA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,mBAAA;AACA,GAdA;AAeA,EAAA,OAAA,EAAA;AACA;AACA;AACA,IAAA,WAAA,EAAA,uBAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,gBAAA;AACA,KALA;AAMA,IAAA,OAAA,EAAA,mBAAA;AACA,aAAA,KAAA,MAAA,CAAA,QAAA,CAAA,WAAA,CAAA;AACA;AARA,GAfA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,SAAA,EAAA,qBAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA,KAHA,CAIA;AACA;AACA;;AANA,GAzBA;AAiCA,EAAA,QAAA,EAAA;AACA;AACA;AACA,IAAA,QAHA,sBAGA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,WAAA;AACA,KALA;AAMA,IAAA,OANA,qBAMA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,OAAA;AACA;AARA;AAjCA,CAAA","sourcesContent":["<template>\n    <!-- largest container -->\n    <v-container> \n        <!-- top row -->\n        <v-layout row>\n            <v-btn v-show=\"this.$store.state.user.admin\" route to=\"/products/add\">Add a new item!</v-btn>\n        </v-layout>\n        <!-- aside -->\n        <v-layout justify-space-around row fill-height >\n            <v-flex row xs3> \n                <p>Filter: </p>\n\n            <v-switch\n                v-model=\"raw\"\n                label=\"Raw\"\n                color=\"orange\"\n                @click=\"rawFilter\"\n                >\n            </v-switch>\n            <v-switch\n                v-model=\"infused\"\n                label=\"Infused\"\n                color=\"orange\"\n                >\n            </v-switch>\n            \n\n            </v-flex>\n            <!-- main content  -->\n            <v-flex xs9 row wrap>\n                <SingleProduct v-for=\"product in products\" :key=\"product.id\" :products=\"product\" /> \n            </v-flex>\n        </v-layout>\n    </v-container>\n</template> \n\n\n<script>\nimport SingleProduct from \"../components/SingleProduct\"\nexport default {\n    components: {\n        SingleProduct\n    },\n    data(){\n        return { \n            // useful for data binding in forms most commonly used as a local state,\n            // also useful with v-model in form inputs\n            raw: true,\n            infused: true\n        }\n    }, \n    created() {\n        this.$store.dispatch('fetchProductsData');\n    },\n    mounted:{\n        // life cycle method. good for executing a dispatch to populate your data\n        // this.$store.dispatch('getAllLinks', optionalPayload);\n        getProducts: function() {\n            this.$store.dispatch(\"getAllProducts\")\n        },\n        getUser: function() {\n            return this.$store.dispatch('fetchUser') \n        }\n    },\n    methods: {\n        rawFilter: function(){\n            console.log(\"Raw was hit!\");\n        }\n        // this is a static method you have exectute example submit on form \n        // these methods are executed via an event\n        // use for event handling\n    },\n    computed: {\n        // these are bound to store, recalced any time you change the corresponding store value\n        // these values are good for data binding, for example, iterating over a list of values\n        products() {\n                return this.$store.getters.getProducts\n        },\n        getCart(){\n            return this.$store.getters.getCart\n        }\n    }\n}\n</script>\n\n\n<style>\n\n</style>\n"],"sourceRoot":"src/views"}]}